/*
Description:
This code is to setup an arduino to record a button press sequence, and transmit it to a arduino that has the octobanger firmware already loaded onto it for field programming.
The hope is to make it as easy to program an arduino in the field as it is for a PicoBoo.

Operation:
-User will connect the FieldProgrammer to the octobanger
-Led on FieldProgrammer will blink till it is initialized
-User will press record button, which will start recording button sequence
-User will press buttons in the sequence they want the relays to trigger
-While pressing the buttons during the program sequence the relays on the Octobanger will trigger in response.
-Once complete the user will press the record button again to end the sequence, and the Field programmer will start sending the new sequence to the octobanger.


Contributors:
James Manley - james.manley@scareforacure.org


Pin Mapping
Arduino Nano
[0/1] Tx/Rx - Used to transmit seriall commands to OctoBanger Baud:115200
[2] Btn_1
[3] Btn_2
[4] Btn_3
[5] Btn_4
[6] Btn_5
[7] Btn_6
[8] Btn_7
[9] Btn_8
[11]Record Button

RJ45 connector - T586B 10/100 DC mode B
| OctoBanger
| [RX]  [TX]  [12VDC] [TX]  [GND]
  1 2   3     4 5     6     7 8
| [TX]  [RX]  [VIN]   [RX]  [GND]
| OctoField
// under normal cirucmstance the pairs on TX and RX are supposed to be opposite polarities for noise canceling, for our purposes we just wire the siganl to both for simplicity and signal reliance.


The array the data is stored in is using the SRAM of the arduino, you have to alloy 2x the space due to the array being coppied into the subfunction for transmission.
Nano SRAM : 2 KB - limit of 500 frames, worst case scenario of 25.5 seconds of recording
Mega SRAM : 8 KB - limit 2000 frames, worst case of 102 seconds

The sequence is stored EEPROM of the Octobanger, the EEPROM is about half the size of the sram, 
Nano EEPROM : 1KB
Mega EEPROM : 4KB


//11/8/21-James M
Was able to get it to record reliably I think the issue i was having before was that i was trying to use one nano to power the other, which doesn't provide enough power.
This time i opted to use a mega that was powered seperate form the octobanger and it seemed to have worked fine. Will need to restest with another nano just to make sure there wasn't something else causing the issues.

*/

//Libraries
#include <RBD_Timer.h>
#include <RBD_Button.h>  //not very nice in that it only lets you choose the pin at object instantiation time!

////////////////////////////////////////////////////////////////
/// V Define System Below V ///


///^ Define system above ^///
//////////////////////////////////////////////////////////
/// V leave code Below alone V ///

//inputs
RBD::Button Record(11);
const unsigned numChannels= 8;
RBD::Button Ch[numChannels]={{2},{3},{4},{5},{6},{7},{8},{9}};//if compiler is too ancient for this syntax we will create 8 named objects then make an array of references to them.

RBD::Button Trigger(10);

//timers
RBD::Timer FrameTime(50); //sets the time for each from to be at 50 ms
RBD::Timer RecordBlink(200);// for blinking status led while recording

//outputs
int Indicator = 13;

//global variables
bool recording = false; // variable for tracking if recording is currently in progress 1 = yes
bool BlinkStatus = false;

const unsigned numFrames=500;
struct Step {
  byte pins;  //sizes here determined by octobanger rules.
  byte count;
  Step(byte p,byte c):pins(p),count(c){} //could probably trust default constructor
} Sequence[numFrames]; // create max rows allowed by blaster. 

Step* active=nullptr;//was byte RelayStat = 0 ; //packed relay status bits and unsigned FrameCount = 0; // number of time segments frame is active


byte pinsNow(){
  byte mask = 0;
  while(ch=8;ch-->0;){
    if(Ch[ch].isPressed()){
      mask |= 1<<ch;  
    }
  }
  return mask;
}

void endRecording(){
  recording = false;
  FrameTime.stop();
  TransmitSeq(Sequence,active); // starts transmission of the collected array.
  firstFrame();//corrupt the sequence rather than the program's memory if we ignore we've over shot the max frame      
}

void startStep(byte pins){
  active->pins=pin;
  active->count=0;
}

void firstFrame(byte pins){
  active=Sequence;
  startStep(pins);
}

unsigned currentFrame(){
  if(!active){
    firstFrame(0);  
  }
  return (active-Sequence)/sizeof(*active);
}

bool nextFrame(byte pins){
  if(++active && currentFrame >= numFrames){
    endRecording();    
    return false;
  } else {
    startStep(pins);
    return true;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////
///V- Sub Functions -V ///
//////////////////////////

void TransmitSeq(Step a[],Step *last){
//Programming hex commands:
//baud 115200
//@S = begin to receive new program
//XX 00 = 2x # of frames to be received (least byte greatest byte)
//___________ //V- this section repeats for each frame to be transmitted
//Xx = relay combo for each frame
//xx = # of 1/20 seconds frame is active
//------------------- //V- this section is required even if the state didn't change at the end
//00 = Relay combo for final frame // if programming on octobanger this could have a value, but for here its easier to just force to of
//00 = zero time duration for end of program

//erased as we know how many frames, we don't need to clear the memory when we begin and then do this expensive thing to find the end as we know the end!
 // for(int y = numFrames; y -->0 ;){// go through the array and find the last updated frame without 0 frame count, thats where our program stopped
 //   if(a[y].count != 0){
 //     //this is the last part of our sequence
 //     frametrack = y;
 //     break; // weve already found the end we can stop looking now.
 //   }
 // }
  
  unsigned bytecount = (currentFrame()+1) *2; //+1 for extra zero step we send for good luck. 
  
  Serial.write("@S",2);
  //transmit the bottom 8 bits then the top 8 bits, don't trust that we and the destination have the same native byte orders.
  Serial.write(linecount);
  Serial.write(linecount >> 8);
  
  for(Step *step=Sequence ; step <= active; ++step){ 
    Serial.write(step.pins); 
    Serial.write(step.count);
  }

  Serial.write(0); // go ahead and send the ending frame.
  Serial.write(0);  
}

void SequenceStream(byte b){
//Streaming hex Commands:
//baud 115200
//@Mx = instantly tell octobanger to activate corresponding relays
//      //x= hex value of relay states  
//
  byte ThreeByteArray[] = {'@','M',b};
  Serial.write(ThreeByteArray,3);
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////
///V-Main Functions-V///
//////////////////////// 

void setup(){
    
  Serial.begin(115200); // commuication with computer
  
  //Serial.begin(115200); // commuication with computer
  //Serial1.begin(115200); //override baud rate for uno, should also work for nano
  FrameTime.stop();
  pinMode(Indicator, OUTPUT);

  Record.setDebounceTimeout(40);
  Trigger.setDebounceTimeout(40);

  //while(!Serial.available()){
  //  delay(100);
  //}
  
}

void loop(){

  if(!recording && Record.onPressed()){
    recording = true;
    FrameTime.restart();
    firstFrame(pinsNow());
    delay(20);//this needs justification! We aren't sending anything to the banger so shouldn't need to guard against overrunning it.
  }

  if(recording && Record.onPressed()){
    recording = false;
    FrameTime.stop();
    TransmitSeq(Sequence); // starts transmission of the collected array.
    delay(500);//this needs justification! Probably needs to be inside TransmitSeq if it is to keep us from talking to a device that is not listening due to burning lots of eprom.  
  }

  if(Trigger.onPressed()){
    byte TwoByteArray[] ={'@','T'};
    Serial.write(TwoByteArray,2);
    delay(500);//this needs justification.
  }
  
///^ INPUT BASED EVENTS GO ABOVE ^///
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///V TIMING BASED EVENTS GO BELOW V///

  if(recording && RecordBlink.onRestart()){
    BlinkStatus = !BlinkStatus;
    digitalWrite(Indicator, BlinkStatus);
  }
  if(!recording){
    BlinkStatus = 0;
    digitalWrite(Indicator, BlinkStatus);
  }

  if(FrameTime.onRestart()){ // should repeat every 50 ms, re-reading all the buttons and recording them.
    byte pins = pinsNow();
    if(pins == active->pins){ // if the combination of relays is the same as last round, increase the counted frames in the array
      if(++active->count==0){//rolled over!
        --active->count;
        nextFrame(pins)){//ran off of the end!        
      } 
    } else{ // if the relay stat is not the same as the last round, move to a new frame in the array      
      nextFrame(pins);
      SequenceStream(pins); // send the current relay combo to the arduino to have the relay's mimic the buttons in real time.
    }
  }
   
}  //end loop()

